import csv
import xml.etree.ElementTree as ET


class XmlParser:
    def __init__(self, filepath):
        self.filepath = filepath
        self.content = []

    def parse_xml(self):
        # create element tree object
        tree = ET.parse(self.filepath)
        root = tree.getroot()
        TEI_NAMESPACE = "http://www.tei-c.org/ns/1.0"

        # Iterate through the XML summary to get person and location names
        summary_tag = f"{{{TEI_NAMESPACE}}}summary"
        summary_element = root.find(f".//{summary_tag}")

        if summary_element is not None:
            pers_names_summary = {}
            place_names_summary = {}
            self.iterate_elements(summary_element, pers_names_summary, "persName", 0)
            self.iterate_elements(summary_element, place_names_summary, "placeName", 0)
        else:
            raise ValueError("No summary found in the XML file.")

        # Iterate through the XML body to get person and location names
        body_tag = f"{{{TEI_NAMESPACE}}}body"
        body_element = root.find(f".//{body_tag}")

        if body_element is not None:
            pers_names_body = {}
            place_names_body = {}
            self.iterate_elements(body_element, pers_names_body, "persName", 0)
            self.iterate_elements(body_element, place_names_body, "placeName", 0)
        else:
            raise ValueError("No body found in the XML file.")

        self.content = [pers_names_summary, place_names_summary, pers_names_body, place_names_body]
        return pers_names_summary, place_names_summary, pers_names_body, place_names_body

    def iterate_elements(self, element, dictionary, dict_type, level=0):
        """Recursively iterate through XML elements and returns the body of a child element."""
        for child in element:
            if self.has_children(child):
                self.iterate_elements(child, dictionary, dict_type, level + 1)
            elif dict_type in child.tag:
                try:
                    child.get("ref")
                except TypeError:
                    child.set("ref", "unknown")
                self.add_to_dictionary(dictionary, child.text, child.get("ref"))
            else:
                pass

    @staticmethod
    def has_children(element):
        """Check if an XML element has children."""
        return any(True for _ in element)

    @staticmethod
    def add_to_dictionary(dictionary, element, reference):
        """Add the body of an XML element to a dictionary."""
        if element in dictionary:
            dictionary[element]["count"] += 1
        else:
            dictionary[element] = {
                "ref": reference,
                "count": 1
            }

    @staticmethod
    def reverse_text_and_reference(dictionary):
        """Reverse the text and reference in the dictionary."""
        ref_dict = {}
        for name, value in dictionary.items():
            if value["ref"] in ref_dict:
                ref_dict[value["ref"]]["name"].append(name)
                ref_dict[value["ref"]]["count"] += value["count"]
            else:
                ref_dict[value["ref"]] = {
                    "name": [name],
                    "count": value["count"]
                }

        return ref_dict

    def print_content(self):
        print("Person Names in Summary:")
        for name, info in self.content[0].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")

        print("\nPlace Names in Summary:")
        for name, info in self.content[1].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")

        print("\nPerson Names in body:")
        for name, info in self.content[2].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")

        print("\nPlace Names in body:")
        for name, info in self.content[3].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")


if __name__ == "__main__":
    filepath = "G:/Meine Ablage/ILU/NEW/1.xml"

    parser = XmlParser(filepath)
    pers_names_summary, place_names_summary, pers_names_body, place_names_body = parser.parse_xml()
    parser.print_content()

    print(pers_names_summary)
    reversed_dict = parser.reverse_text_and_reference(pers_names_summary)
    print("\nReversed Person Names in Summary:")
    print(reversed_dict)


