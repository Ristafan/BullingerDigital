import csv
import xml.etree.ElementTree as ET


class XmlParser:
    def __init__(self, filepath):
        self.filepath = filepath
        self.content = []

    def parse_xml(self):
        # create element tree object
        tree = ET.parse(self.filepath)
        root = tree.getroot()
        TEI_NAMESPACE = "http://www.tei-c.org/ns/1.0"

        # Iterate through the XML summary to get person and location names
        summary_tag = f"{{{TEI_NAMESPACE}}}summary"
        summary_element = root.find(f".//{summary_tag}")

        if summary_element is not None:
            pers_names_summary = {}
            place_names_summary = {}
            self.iterate_elements(summary_element, pers_names_summary, "persName", 0)
            self.iterate_elements(summary_element, place_names_summary, "placeName", 0)
        else:
            raise ValueError("No summary found in the XML file.")

        # Iterate through the XML text to get person and location names
        text_tag = f"{{{TEI_NAMESPACE}}}text"
        text_element = root.find(f".//{text_tag}")

        if text_element is not None:
            pers_names_text = {}
            place_names_text = {}
            self.iterate_elements(text_element, pers_names_text, "persName", 0)
            self.iterate_elements(text_element, place_names_text, "placeName", 0)
        else:
            raise ValueError("No text found in the XML file.")

        self.content = [pers_names_summary, place_names_summary, pers_names_text, place_names_text]
        return pers_names_summary, place_names_summary, pers_names_text, place_names_text

    def iterate_elements(self, element, dictionary, dict_type, level=0):
        """Recursively iterate through XML elements and returns the text of a child element."""
        for child in element:
            if self.has_children(child):
                self.iterate_elements(child, dictionary, dict_type, level + 1)
            elif dict_type in child.tag:
                try:
                    child.get("ref")
                except TypeError:
                    child.set("ref", "unknown")
                self.add_to_dictionary(dictionary, child.text, child.get("ref"))
            else:
                pass

    @staticmethod
    def has_children(element):
        """Check if an XML element has children."""
        return any(True for _ in element)

    @staticmethod
    def add_to_dictionary(dictionary, element, reference):
        """Add the text of an XML element to a dictionary."""
        if element in dictionary:
            dictionary[element]["count"] += 1
        else:
            dictionary[element] = {
                "ref": reference,
                "count": 1
            }

    def print_content(self):
        print("Person Names in Summary:")
        for name, info in self.content[0].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")

        print("\nPlace Names in Summary:")
        for name, info in self.content[1].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")

        print("\nPerson Names in Text:")
        for name, info in self.content[2].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")

        print("\nPlace Names in Text:")
        for name, info in self.content[3].items():
            print(f"{name}: {info['count']} times, Reference: {info['ref']}")


if __name__ == "__main__":
    filepath = "G:/Meine Ablage/ILU/NEW/1.xml"

    parser = XmlParser(filepath)
    pers_names_summary, place_names_summary, pers_names_text, place_names_text = parser.parse_xml()
    parser.print_content()


